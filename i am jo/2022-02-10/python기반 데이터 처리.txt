데이터의 시각화 - > 수 많은 데이터를 한 눈에 파악하는 법 ( 그래프 : 시각화 , 통계량 : 수치화 )

파악해야되는 것은 비지니스 +

Focus 
 - 우리가 다루는 데이터는 비즈니스를 담고 있다 
 - 데이터 시각화의 목적은 비즈니스의 인사이트

한계 
 - 그래프와 통계량은 대부분 정보(원본)를 요약한다 -> 요약을 하면 정보의 손실이 발생

라인차트 => 어떤 값의 추세를 알려고 

============================================================

Exploratory Data Analysis 탐색적 데이터 분석
▪ 비즈니스와 해결해야 할 문제를 더 잘 이해(파악)하기 위해
▪ 정보(데이터)에 대해
▪ 차트와 기초통계량을 이용하여
▪ 분포를 파악

Confirmatory Data Analysis, 확증적 데이터 분석
▪ 가설에 대해 검증(검정)하고, 
▪ 필요시 실험을 통해 확인

산술평균(arithmetic mean) : 
- 모든 값들을 더한 후, 개수로 나눈 수.

조화평균(harmonic mean) :
- 분자가 동일한 두 비율의 평균

===============================================
plt.plot('v1', 'v2', 'go--', data = dict1) #색이름 o-- 이런식 ->g(색이름)
plt.plot('v1', 'v3', 'rs-', data = dict1)  #색이름 s-- 이런식 ->r(색이름) s(마커) -(라인 스타일)

plt.legend() #apple , mango (label 값)을 보여줘 라는 뜻 / lengend() 사용하려면 label값이 존재 해야됨
plt.grid() #십자 선

축 범위 조정
lim (limit라는 뜻)
 ->plt.xlim(0, 6) #(0,6) 축까지만 보여줘 0 < x < 6

크기 조정
figsize
 ->plt.figure(figsize = (4, 3)) # 차트 x,y 축 크기 조정

수평선 , 수직선 추가
hline : 수평선 
 ->plt.axhline(5.3, color = 'grey', linestyle = '--')
vline : 수직선
 ->plt.axvline(2.4, color = 'grey', linestyle = '--')

그래프에 텍스트 추가
plt.text(2.5, 4.2, '2.4')
plt.text(1.2, 5.4, '5.3')

그래프 나누기
plt.subplot(row , column , index) ** row : 고정된 행 수 , column : 고정된 열 수 , index : 순서 **
 =>plt.subplot(2,1,1)
     plt.plot('v1', 'v2', 'go--', data = dict1)

     plt.subplot(2,1,2) 
     plt.plot('v1', 'v3', 'rs-', data = dict1)
	plt.tight_layout()  #그래프간 간격 적절히	

 =>plt.subplot(1,2,1)
     plt.plot('v1', 'v2', 'go--', data = dict1)

     plt.subplot(1,2,2)
     plt.plot('v1', 'v3', 'rs-', data = dict1)

=================================================
4분위수 ( cut 하고 느낌 비슷)
- percentile
 => a = [1, 2, 3, 3, 4, 4, 4, 5, 6, 7, 8, 9, 10, 11, 15, 17, 17, 19, 20, 25, 30]
	print(np.percentile(a, [0, 25, 50, 75, 100]))

시리즈.describe()
 - count , mean, std , min , 4분위수 , max , dtype

데이터프레임.dtypes
 : 데이터프레임 각 변수들의 데이터 타입 조회

데이터프레임.info()
 : 데이터프레임 각 변수들의 데이터 건수와 타입 조회

데이터프레임.describe()
 : 데이터프레임 각 변수들의 기초통계량을 조회

============================================================

결측치 처리

결측치 
 -NA(Not Available) 혹은 NaN(Not A Number)
 -사용할 수 없는 값
 -잘못 들어간 값
 -빈 값

NaN 조치
 -중요한(버릴 수 없는) 변수라면,
 -모델링을 하기전에 반드시 조치해야 합니다.
 -조치하지 않는다면...
  -NaN 값, 즉 결측치는 정확한 분석을 방해합니다.
  -NaN 값을 만나면 오류가 발생하는 함수도 있습니다.

NA조치 하는 세 가지 방법
 -제거한다.
 -채운다
 -분리한다.

isnull() 메소드는 결측치면 True, 유효한 값이면 False를 반환
 
notnull() 메소드는 결측치면 False, 유효한 값이면 True를 반환

isnull() 대신 isna(), notnull() 대신 notna() 메소드를 사용해도 됨

=>air.isna()   air.notna()

sum() 메소드를 사용해 True 값의 개수, 즉 열의 결측치 개수를 확인할 수 있다
 => air.isnull().sum()

결측치 제거 
 -dropna( ) : 결측치가 있는 열이나 행을 제거
 -inplace = True 옵션을 지정해야 해당 데이터프레임에 실제 반영됨
 -axis 옵션으로 행을 제거 할 지 열을 제거할 지 지정 ( 0은 행 , 1은 열)

=======================================================

산술평균 
mean()
 -> print(np.mean(a))

중앙값 
median()
 ->print(np.median(a))

최빈값 
mode()
 ->print(pd.Series(a).mode())

4분위수
percentile()
 ->print(np.percentile(a, [0, 25, 50, 75, 100]))

============================================================2022.02.10