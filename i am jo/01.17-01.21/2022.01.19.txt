DB의 Key

1. 기본키 - 테이블마다 가져야 하는 고유한 값 ( 보통 숫자 )
2. 외래키 - 다른 테이블의 기본키 값 --> 기본키와 같은 값만 사용한다고 외래키는 아니고 테이블을 생성할 때 관계를 설정해야 됨
3. 후보키 
4. 대체키
5. 슈퍼키

내 이름이 김 이다. 세상에는 김 이라는 이름은 많다. 하지만 내가 사는 곳 a시에 사는 김 이면 많이 줄일 수 있고 
정확히 a시 b동 c아파트에 사는 김 은 나 혼자-> 이런식으로 여러개를 묶어서 사용 가능

=======================================================================================
SET_NULL : 상대방 테이블의 기본키가 삭제될때 null 값으로 변경

CASCADE : 상대방 테이블의 기본키가 삭제될때 같이 삭제

모델
1. 연관관계 (ForeignKey , OnetoOne , MnaytoMany)

=======================================================================================

조회
all() - 전체  - List
get() - 1개  - Object(Modle-Class) - id로 조회할때 사용
filter() - N개 - List
exclude - 조건에 맞는거는 제외하고 가지고옴 (class명.objects.exclude(조건)
count - 데이터의 개수를 세줌(class명.objects.count()
order_by - 오름차순 정렬 class명.objects.filter(name__contains='n').order_by('속성') // name__contains='n' ->name에 n이 포함되있는것
            - 내림차순 정렬  class명.objects.filter(name__contains='n').order_by('-속성')
-----------------------------------------------------------------------------------------
create - 모델 객체 생성 -class명.objects.create(속성값)                                     l
.save - 객체 생성 후 save() - 변수명(c) = class명(Curriculm)(속성)(name='kotlin')      l => 둘 중 아무거나 
                                    c.save()                                                           l     .save가 더 편함
------------------------------------------------------------------------------------------

수정하기 ( 데이터 1건 조회 -  값 변경 - 저장), 반드시get사용 - data = Curriculum.objects.get(id=3) ->data.name = 'javascript'->data.save()
삭제하기 (데이터 조회 - 값 삭제) -data = Curriculum.objects.get(id=6) -> data.delete()
========================================================================================
데이터베이스 제어
C R U D
Create Read Update Delete
===============================================================================================
Functhin Views
- 자주 사용되는 4가지 반환 타입

 -HttpResponse : 형태를 지정하여 반환 (기본 값 text/html) 
		from django.http import HttpResponse
		def html(request):
			return HttpResponse('<h1>Plain Text</h1>')

 -render() : HTML Template
		from django.shortcuts import render
		def template(request):
			data = {
				'str': 'text', 'num': 10,
				'list': [1, 2, 3],
				'dict': {'a': 'aaa', 'b': 'bbb'}
				}
				return render(
					request, 'template.html', context=data)

 -JsonResponse : JSON - 파이썬의 딕셔너리 형태로 보여줌 [] , {} / 넣을땐 딕셔너리 or 리스트로 //사용되는 경우 : 1.회원 가입 시 아이디 중복 검사 2.지도 사용 시 주변 데이터 표시 3.영상 재생 중 댓글 달기(좋아요 표시) =>비동기 통신(AJAX)이 필요한 경우
			from django.http import JsonResponse
			# 파이썬에서 제공하는 기본 자료형태 반환
			def python_data(request):
				data = { 'key1': 'value1', 'key2': 'value2' }
				# data = [ 'value1', 'value2', 'value3' ]
				return JsonResponse(data)
                                  -----------------------------------------------------------
			from django.http import JsonResponse
			from django.forms.models import model_to_dict
			# 장고 모델 자료형태 반환
			def model_data(request):
				curriculum = Curriculum.objects.all()
				data = []
				for c in curriculum:
					c = model_to_dict(c) # QuerySet -> Dict
					data.append(c)
				# dict가 아닌 자료는 항상 safe=False 옵션 사용 *반드시*
				return JsonResponse(data, safe=False)

 -redirect : 매개체를 통해 어딘가로 연결시켜 줄 때(navet.com 을 써도 naver.com로 연결해줌) / (메인화면 - 로그인 화면 - 로그인 후 다시 메인화면으로 다시감)
		return redirect('../main') 			http://127.0.0.1:8000/first/main/
		return redirect('/first/main/') 			http://127.0.0.1:8000/first/main/
		return redirect('http://naver.com') 		https://www.naver.com/
		return redirect('main') 			http://127.0.0.1:8000/first/main/


-데이터 전달 및 확인
 -Path Parameter(Path Variable)   / 표현
 -Query Parameter(Query String) ? 표현

===================================================================================
파이썬 formatting 방식 3가지