#인덱스: 역순으로 조회/ 리스트[시작인덱스:끝인덱스] ex) a=[23,3,16,45,11] print(a[0:3]) =>[23,3,16]
#                                                                           a[:3] => [23,3,16] / a[2:] => [16,45,11]

#리스트.append() : 함수 형태를 메서드라고 부른다./ 리스트 + 리스트 : 하나로 붙음
#a = [23,3,16,45,11] 
#a.append(99) =>[23,3,16,45,11,99]
#리스트[인덱스] = 새 값 / ex) a [23,3,16,45,11] a[1] = 300 print(a)  => [23,300,16,45,11]
#del 리스트[인덱스] / ex) a[23,3,16,45,11] del a[1] print(a) => [23,16,45,11]

#len(리스트) : 리스트 값들의 개수를 세어줌

#sum(리스트) : 값들이 숫자일때, 모두 더해준다.

#type(자료형) : 자료형이 어떤 형태인지 알려준다

#리스트.append(값) : 리스트 제일 끝에 값 추가

#리스트.inserr(인덱스,값) : 특정 인덱스 위체에 값 추가.(뒤의 값들은 밀림)

#리스트.remove(값) : 해당 값을 찾아서 삭제 -> 특정값을 지우는데, 여러개의 값이 있다면 처음 나오는 값을 지움!

#리스트.sort(): 리스트의 값들을 정령시켜서 저장

#  리스트.sort(reverse = True) : 내림차순 정렬

#for _ in 리스트 : 리스트 목록의 인덱스0 부터 마지막 인덱스까지 값을 하나씩 가져다 처리
# a = ['사자', '코끼리', '하마', '기린', '얼룩말'] =>0 1 2 3 4 
#   for animal in a:
#       print(animal)

#for 반복문으로 처리된 결과를 리스트에 담기도함
# multiple7 = []
# for n in range(1,101):
#   if n % 7 == 0:
#       multiple7.append(n) => 리스트에 값을 추가
#print(multiple7) => [7,14,21,28,35,42,49,56,63,70,77,84,91,98]

#dict_a = {'v1':32,
#           'l1;:[1,2,3],
#           'd1':{'a':1,'b':2}} //가급적 문자로만 {'key' : value} 형태로 선언

#.keys() : 딕셔너리의 key만 조회하기 / .values() : 딕셔너리의 값만 조회하기 / .items() : key와 값을 쌍(tuple)으로 조회 / tuple: 리스트와 유사

#딕셔너리 수정=> 추가 : 딕셔너리['새 키'] = 새 값 / 수정 : 딕셔너리['키'] = 새 값 / 삭제 : del 딕셔너리['키']

#.get() : .get('key', 0) : 'key'가 있으면 값을 불러오고, 없으면 0을 가져오기
