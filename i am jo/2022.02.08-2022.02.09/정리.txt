2차원 = 1차원 데이터가 여러개
3차원 = 2차원 데이터가 여러개
4차원 = 3차원 데이터가 여러개 ---
=============================
용어

-axis: 배열의 각 축
-rank: 축의 개수
-shape: 축의 길이, 배열의 크기

===============================

shape = > 2, 3 ,3 ( 개 , 행 , 열) -> 뒤에 행,열은 2차원 , 개는 2차원의 개수

===============================

# (3, 2) 형태의 2차원 배열로 Reshape
b = a.reshape(3, 2)

===============================

조건문의 결과는 True, False
- score >= 90
->array([[False,  True, False, False,  True, False],
       [False, False,  True, False,  True, False]])

=================================
배열 더하기

-print(x + y)

또는

-print(np.add(x, y))

배열 빼기

-print(x - y)

또는

-print(np.subtract(x, y))

배열 곱하기
-print(x * y)

또는

-print(np.multiply(x, y))

배열 나누기

-print(x / y)

또는

-print(np.divide(x, y))

배열 y 제곱

-print(x ** y)

또는

-print(np.power(x, y))

================================

배열 집계

-np.sum(), 혹은 array.sum()
-axis = 0 : 열 기준 집계
-axis = 1 : 행 기준 집계
-생략하면 : 전체 집계
-동일한 형태로 사용 가능한 함수 : np.max(), np.min, np.mean(), np.std()
전체 집계-print(np.sum(a))

열기준 집계-print(np.sum(a, axis = 0))

행기준 집계-print(np.sum(a, axis = 1))

전체 중에서 가장 큰 값의 인덱스-print(np.argmax(a))

행 방향 최대값의 인덱스-print(np.argmax(a, axis = 0))

열 방향 최대값의 인덱스-print(np.argmax(a, axis = 1))

==================================
DataFrame
주요옵션

-usecols : 불러올 칼럼 지정(칼럼이름을 알고 있어야 함)
-sep: 구분자 지정(기본값 = 콤마)
-header: 헤더가 될 행 번호 지정(기본값 = 0)
-index_col: 인덱스 열 지정(기본값 = False)
-names: 열 이름으로 사용할 문자열 리스트
-skiprows: 처음 몇 줄을 무시할 것인지 지정, 리스트로 지정 가능
-head(): 상위 데이터 확인
-tail(): 하위 데이터 확인
-shape: 데이터프레임 크기
-index: 인덱스 정보 확인
-values: 값 정보 확인
-columns: 열 정보 확인
-dtypes: 열 자료형 확인
-info(): 열에 대한 상세한 정보 확인
-describe(): 기초통계정보 확인

데이터 읽어오기
path = 'https://raw.githubusercontent.com/DA4BAM/dataset/master/Attrition_simple2.CSV'
Attrition = pd.read_csv(path) 

상위 5개 확인
Attrition.head() # default는 5

열 자료형 확인
-data.dtypes

================================================================2022 - 02 - 08

series  = column = 데이터 프레임에서 컬럼 하나 똑 땐거  = 1차원

데이터 프레임 = 2차원

==============================================
Numpy Array [조건문]

df (DataFrame) [조건문]

df.loc[조건문]

===============================================

특정 열 조회

a = data[' 열 '] -> 시리즈  / a = data[[' 열 ']] -> DataFrame

data.열 -> 시리즈	         / data[[' 열 ' ]] - > DataFrame *대괄호 안에 또 대괄호로 읽기 x 대괄호 안에 리스트!!!*

===============================================

조건으로 조회

data[' 열이름 '] > 10 -> 결과는 True , False

data.loc[data['열 이름 '] > 10] -> 열 값이 10보다 큰 행 조회

여러 조건 조회
** [ ] 안에 조거을 여러개 연결할 때 and와 or 대신에 & 와 | 를 사용 **
** 각 조건들은 (조건1) & (조건2) 이런 식으로 괄호로 묶어야됨 **

data.loc[(data[' 열 이름 '] > 10) & (data['열 이름 '] == 4)]

isin() -> isin( [ 값1, 값2, ... , 값n] ) ** isin(리스트) 값들을 리스트 형태로 입력 **

data.loc[data['열 이름 '].isin([1,4])] => or와 같은 의미

between(값1, 값2) : 값1 이상 값2 이하의 데이터 조회 

data.loc[data[' 열 이름 '].between(25, 30)] => and와 같은 의미

================================================

조건을 만족하는 행의 일부 열 조회

df.loc[조건, ['열 이름1', '열 이름2',...]] 형태로 조회할 열을 리스트로 지정 ==> 2차원, 데이터프레임형태로 조회

data.loc[data[' 열 이름 '] >= 10000, '열 이름']

=================================================

데이터프레임 집계
** 상세 데이터가 아닌 집계된 데이터에 대한 분석을 자주 요구 **
** sum(), mean(), max(), min(), count() 메소드를 사용해 지정한 열 또는 열들을 기준으로 집계 **
** 평균을 구하는 메소드가 avg()가 아닌 mean() 임을 주의 **

합계
data['열 이름 '].sum()

평균
data[ [' 열 이름1 ', '열 이름2' ] ].mean()

data.groupby(' 열 이름1 ', as_index=True)['열 이름2'].mean()
** groupby 는 '열 이름1' 별 이라는 내용 / '열 이름1' 별인건 index 나오는게 값 **
** as_index = True를 기본값 하면 집계 기준이 되는 열이 인덱스 열이 된다 / as_index는 웬만하면 False 로**

여러 열 집계
data.groupby('열 이름1', as_index=False)[['열 이름2','열 이름3']].mean()

여러 함수로 한꺼번에 집계

df.groupby( ).agg( ['함수1','함수2', ...] ) 

====================================================

데이터프레임 변경

열 이름 변경
- rename() : 메소드를 사용해 변경 전 후의 열 이름을 딕셔너리 형태로 나열하는 방법으로 변경
 =>data.rename(columns={'열 이름1' : '바꿀 이름1', '열 이름2' : '바꿀 이름2''}, inplace=True)
 			** inplace =True 옵션을 설정해야 변경 사항이 실제 반영 **

모든 열 이름 변경
- columns : 모든 열 이름을 변경 / 변경이 필요 없는 열은 기존 이름을 부여
 => data.columns = ['바꾼 이름1', '기존 이름1 ', '바꾼 이름2']

열 추가
data['추가할 열 이름'] = 조건 ** 열의 맨 끝에 추가 됨  / insert( ) 메소드를 사용하면 원하는 위치에 열을 추가할 수 있습니다. **

열 삭제
- drop () ** axis = 0 : 행 삭제 (기본 값) , axis = 1 : 열 삭제 , inplace = True 옵션 지정 False는 삭제한 것 처럼 보여주는 용(조회) **

여러 열 삭제
data.drop(['삭제할 열 이름1','삭제할 열 이름2'], axis=1, inplace=True)

여러 기능들
-map( ) : 범주형 값을 다른 값으로 쉽게 변경 가능
  => data['열 이름1'] = data['열 이름1'].map({' 바꿀 내용1 ': 무엇으로 바꿀건지1 , '바꿀 내용2'': 무엇으로 바꿀건지2})